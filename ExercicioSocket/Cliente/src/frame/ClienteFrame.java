/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import bean.ChatMessage;
import bean.ChatMessage.Action;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import service.ClienteService;

/**
 *
 * @author Marilainny Martins da Silva this class has controll about online user
 * list
 */
public class ClienteFrame extends javax.swing.JFrame {

    private Socket socket;
    private ChatMessage message;
    private ClienteService service;

    /**
     * Creates new form ClienteFrame
     */
    public ClienteFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private class ListenerSocket implements Runnable {

        private ObjectInputStream input;

        public ListenerSocket(Socket socket) {
            try {
                this.input = new ObjectInputStream(socket.getInputStream());//inicialization object input
            } catch (IOException ex) {
                Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override

        public void run() {
            ChatMessage message = null; //create variable ChatMessage
            try {
                while ((message = (ChatMessage) input.readObject()) != null) {//send message service
                    Action action = message.getAction();

                    if (action.equals(Action.CONNECT)) { //validacion type message sent for urser (connection request);
                        connected(message); //call of method connect;  

                    } else if (action.equals(Action.DISCONNECT)) {//validacion type message sent for urser (disconnection request leave the char);
                        disconnected(); //call of method connect; 
                        socket.close();

                    } else if (action.equals(Action.SEND_ONE)) {//validacion type message sent for urser (request to send mensagem only one person on-line);
                        System.out.println("::: " + message.getText() + " :::");
                        receive(message);

                    } else if (action.equals(Action.USERS_ONLINE)) {//validacion type message sent for urser (request to get urser online);
                        refreshOnlines(message);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void connected(ChatMessage message) {//method connect;
        if (message.getText().equals("NO")) {//if message get result equal "NO"
            this.jTextFieldTextName.setText("");// it's clear name field.
            JOptionPane.showMessageDialog(this, "Conexão não realizada!\nTente novamente com um novo nome.");//show user message no possible connextion, inside other name.
            return;
        }

        this.message = message;//case messagem different "NO", message receive message.
        this.jButtonConnect.setEnabled(false);//button Connect is enabled
        this.jTextFieldTextName.setEnabled(false);//fild name is enabled

        this.jButtonClose.setEnabled(true);//button close is able
        this.jTextAreaWriter.setEnabled(true);//able area fild to write.
        this.jButtonSend.setEnabled(true);//able button send message.
        this.jButtonClear.setEnabled(true);// able button clear message.
        this.jTextAreaReceive.setEnabled(true);//able area field receive message.

        JOptionPane.showMessageDialog(this, "Você está conectado no chat!");//mensagem urse connected on chat.
    }

    private void disconnected() {

        this.jButtonConnect.setEnabled(true);//able button interface.
        this.jTextFieldTextName.setEnabled(true);//fild name is able

        this.jTextAreaWriter.setEnabled(false);//enable area fild to write.
        this.jTextAreaReceive.setEnabled(false);//enable area field receive message.
        this.jButtonSend.setEnabled(false);//enable button send message.
        this.jButtonClear.setEnabled(false);// enable button clear message.
        this.jButtonClose.setEnabled(false);//button close is able

        this.jTextAreaReceive.setText("");
        this.jTextAreaWriter.setText("");

        JOptionPane.showMessageDialog(this, "Você saiu do chat!");//mensagem urse connected on chat.
    }

    private void receive(ChatMessage message) {//method send message only one person;
        this.jTextAreaReceive.append(message.getName() + " diz: " + message.getText() + "\n");// send message with name who send

    }

    private void refreshOnlines(ChatMessage message) {//method refresh urser online;
        System.out.println(message.getSetOnlines().toString());
        Set<String> names = message.getSetOnlines();
        names.remove(message.getName());
        String[] array = (String[]) names.toArray(new String[names.size()]  );// modify set names in a array

        this.jListOnline.setListData(array);//set array field online.
        this.jListOnline.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //accept only one selection of name at a time.
        this.jListOnline.setLayoutOrientation(JList.VERTICAL);// names vertical position.

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldTextName = new javax.swing.JTextField();
        jButtonConnect = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListOnline = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaReceive = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaWriter = new javax.swing.JTextArea();
        jButtonClear = new javax.swing.JButton();
        jButtonSend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Conectar"));

        jTextFieldTextName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTextNameActionPerformed(evt);
            }
        });

        jButtonConnect.setBackground(new java.awt.Color(0, 204, 204));
        jButtonConnect.setText("Connectar");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jButtonClose.setBackground(new java.awt.Color(0, 204, 204));
        jButtonClose.setText("Sair");
        jButtonClose.setEnabled(false);
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTextFieldTextName)
                .addGap(18, 18, 18)
                .addComponent(jButtonConnect)
                .addGap(18, 18, 18)
                .addComponent(jButtonClose)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConnect)
                    .addComponent(jButtonClose))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Online"));

        jScrollPane3.setViewportView(jListOnline);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextAreaReceive.setEditable(false);
        jTextAreaReceive.setColumns(20);
        jTextAreaReceive.setRows(5);
        jTextAreaReceive.setEnabled(false);
        jScrollPane1.setViewportView(jTextAreaReceive);

        jTextAreaWriter.setColumns(20);
        jTextAreaWriter.setRows(5);
        jTextAreaWriter.setEnabled(false);
        jScrollPane2.setViewportView(jTextAreaWriter);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButtonClear.setBackground(new java.awt.Color(0, 204, 204));
        jButtonClear.setText("Limpar");
        jButtonClear.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonClear.setEnabled(false);
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButtonSend.setBackground(new java.awt.Color(0, 204, 204));
        jButtonSend.setText("Enviar");
        jButtonSend.setEnabled(false);
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonClear)
                        .addGap(26, 26, 26)
                        .addComponent(jButtonSend))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonClear)
                    .addComponent(jButtonSend))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        this.jTextAreaWriter.setText("");

    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        String text = this.jTextAreaWriter.getText();//get message area Writer.
        String name = this.message.getName();//get name who send message.
        this.message = new ChatMessage(); //clear message older variable.

        if (this.jListOnline.getSelectedIndex() > -1) {//validaction if there are a user selected. The list start value 0, if it's bigger than -1, there is a value selected.
            this.message.setNameReserved((String) this.jListOnline.getSelectedValue());//get values name selected.
            this.message.setAction(Action.SEND_ONE);// send message reservad user to user.
            this.jListOnline.clearSelection();//clear name selected.
        } else {//if user doens't selected to send message everybody user.
            this.message.setAction(Action.SEND_ALL);//It's send a action.
        }
        if (!text.isEmpty()) {
            this.message.setName(name);//It's send the given name.
            this.message.setText(text);//It's send the given name.

            this.jTextAreaReceive.append("Você disse: " + text + "\n");
            this.service.send(this.message);
        }
        this.jTextAreaWriter.setText("");
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jTextFieldTextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTextNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTextNameActionPerformed

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        String name = jTextFieldTextName.getText();//get name interface swing

        if (!name.isEmpty()) {// validation if name is different empty;

            this.message = new ChatMessage();//instance object ChatMessage;
            this.message.setAction(Action.CONNECT);//command Action Connect;
            this.message.setName(name);// set name atribute name class chatname;
            this.service = new ClienteService();//instance class ClienteService;
            this.socket = this.service.connect();//call connect;

            new Thread(new ListenerSocket(this.socket)).start();// instance start Thread ListenerSocket inicialized with this socket;

            this.service.send(message);//send message.
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        ChatMessage message = new ChatMessage();
        message.setName(this.message.getName());
        message.setAction(Action.DISCONNECT);//command button close 
        this.service.send(this.message);
        disconnected();//disconnect user.
    }//GEN-LAST:event_jButtonCloseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JList<String> jListOnline;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaReceive;
    private javax.swing.JTextArea jTextAreaWriter;
    private javax.swing.JTextField jTextFieldTextName;
    // End of variables declaration//GEN-END:variables
}
